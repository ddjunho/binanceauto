import ccxt
import numpy as np
import pandas as pd
import telepot
import time
from datetime import datetime, timedelta
from telepot.loop import MessageLoop

bot = telepot.Bot(token="6371477581:AAFZFHmcDgSheOfqXPWmgmAJpygkQE1dQ4M")
chat_id = "5820794752"

# Binance API 설정
from binance_keys import api_key, api_secret


# Binance API 설정
exchange = ccxt.binance({
    'rateLimit': 1000,
    'enableRateLimit': True,
    'apiKey': api_key,
    'secret': api_secret,
    'options': {
        'defaultType': 'future'
    }
})

# 트레이딩 페어 및 타임프레임 설정
symbol = 'ETCUSDT'
timeframe = '1h'

# 레버리지 설정
leverage = 10

# 텔레그램으로 메시지를 보내는 함수
def send_to_telegram(message):
    try:
        bot.sendMessage(chat_id, message)
    except Exception as e:
        print(f"An error occurred while sending to Telegram: {e}")

stop = False
band_range = 5
def handle(msg):
    global stop
    global follow
    global band_range
    content_type, chat_type, chat_id = telepot.glance(msg)
    if content_type == 'text':
        if msg['text'] == f'/{symbol}start':
            send_to_telegram(f'{symbol} Starting...')
            stop = False
        elif msg['text'] == f'/{symbol}stop':
            send_to_telegram(f'{symbol} Stopping...')
            stop = True
        elif msg['text'] == '/help':
            send_to_telegram(f'/{symbol}start - 시작\n/{symbol}stop - 중지\n/band_range(range) - 밴드의 범위를 설정\n 현재값 : {band_range}')
        elif msg['text'] == '/band_range(4)':
            band_range = 4
        elif msg['text'] == '/band_range(4.5)':
            band_range = 4.5
        elif msg['text'] == '/band_range(5)':
            band_range = 5
        elif msg['text'] == '/band_range(5.5)':
            band_range = 5.5
        elif msg['text'] == '/band_range(6)':
            band_range = 6
        elif msg['text'] == '/band_range(6.5)':
            band_range = 6.5
        elif msg['text'] == '/band_range(7)':
            band_range = 7

# 텔레그램 메시지 루프
MessageLoop(bot, handle).run_as_thread()
# 매수 및 매도 주문 함수 정의
def place_limit_order(symbol, side, amount, price):
    order = exchange.create_order(
        symbol=symbol,
        type="LIMIT",
        side=side,
        amount=amount,
        price=price
    )
    return order

def place_stop_loss_order(symbol, side, amount, price, stop_price):
    return exchange.create_order(
        symbol=symbol,
        type="STOP_MARKET",
        side=side,
        amount=amount,
        stopPrice=stop_price,
        price=price
    )

# 전체 잔액 정보 조회
def get_balance():
    balance = exchange.fetch_balance(params={"type": "future"})
    return balance

# 매매량 계산 함수 정의
def calculate_quantity(symbol):
    try:
        balance = get_balance()
        total_balance = float(balance['total']['USDT'])
        
        # 현재 BTCUSDT 가격 조회
        ticker = exchange.fetch_ticker(symbol)
        btc_price = float(ticker['last'])
        
        # USDT 잔고를 BTC로 환산
        quantity = total_balance / btc_price 
        
        # 소수점 이하 자리 제거
        quantity = round(quantity, 3)
        
        return quantity
    except Exception as e:
        error_message = f"An error occurred while calculating the quantity: {e}"
        send_to_telegram(error_message)
        return None


# 포지션 종료
def close_position(symbol):
    balance_info = get_balance()
    if symbol in balance_info['total']:
        quantity = balance_info['total'][symbol]
        if quantity > 0:
            # 포지션 방향 결정
            position_direction = float(position['positionAmt'])
            if position_direction > 0:
                side = 'SELL'
            else:
                side = 'BUY'
            
            order = exchange.create_limit_order(symbol, side, quantity)
            send_to_telegram(f"Placed limit order to close position of {quantity} {symbol}.")
        else:
            send_to_telegram(f"No position of {symbol} to close.")
    else:
        send_to_telegram("Error getting balance information.")

# 이동평균 계산 함수 정의
def calculate_ema(data, period):
    ema = data['close'].ewm(span=period, adjust=False).mean()
    return ema


# 볼륨 오실레이터 계산 함수 정의
def calculate_volume_oscillator(data):
    short_ema = data.ewm(span=5, adjust=False).mean()
    long_ema = data.ewm(span=10, adjust=False).mean()
    oscillator = (short_ema - long_ema) / short_ema * 100
    return oscillator

# Bollinger Bands 계산 함수 정의
def calculate_bollinger_bands(data, window, num_std_dev):
    rolling_mean = data['close'].rolling(window=window).mean()
    rolling_std = data['close'].rolling(window=window).std()
    upper_band = rolling_mean + (rolling_std * num_std_dev)
    lower_band = rolling_mean - (rolling_std * num_std_dev)
    return upper_band, lower_band


long_trade_executed = False
short_trade_executed = False
trend_follow_long = False
trend_follow_short = False
stop_loss = False
follow = False
profit=0
long_quantity=0
short_quantity=0
# 메인 코드
def execute_strategy(data, window, num_std_dev, ema_period):
    global short_trade_executed
    global long_trade_executed
    global profit
    global long_quantity
    global short_quantity
    global volume_oscillator1
    global volume_oscillator2
    global trend_follow_long
    global trend_follow_short
    global stop_loss
    global sell_future
    global buy_future
    global sell_status_future
    global buy_status_future
    global follow
    global limit_buy_order
    global limit_sell_order
    upper_band, lower_band = calculate_bollinger_bands(data, window, num_std_dev)
    current_price = data['close'].iloc[-1]
    ema = calculate_ema(data, ema_period)
    if upper_band.iloc[-1] is not None and lower_band.iloc[-1] is not None and ((upper_band.iloc[-1] - lower_band.iloc[-1])/current_price*100>=1):
        if not short_trade_executed:
            if data['high'].iloc[-1] >= upper_band.iloc[-1]:
            # 이전 캔들의 고가가 상단 밴드를 돌파한 경우 공매도
                if (upper_band.iloc[-1] - lower_band.iloc[-1])/(upper_band.iloc[-1] + lower_band.iloc[-1])*50>=band_range:
                    short_trade_executed = True
                    volume_oscillator = calculate_volume_oscillator(df['volume'].astype(float))
                    volume_oscillator1 = volume_oscillator.iloc[-1]
                    volume_oscillator2 = volume_oscillator.iloc[-2]
                    if volume_oscillator1 >= 40 and volume_oscillator2 <= 40:
                        short_quantity = calculate_quantity(symbol)*(leverage-5.2)
                        send_to_telegram(f'{symbol}의 거래량이 폭증.')
                    else:
                        short_quantity = calculate_quantity(symbol)*(leverage-0.2)
                    profit = data['close'].iloc[-1]
                    limit_sell_order = place_limit_order(symbol, 'SELL', short_quantity, profit)
                    now = datetime.now()
                    sell_status_future = now
                    sell_future = now + timedelta(hours=4)
                    send_to_telegram(f'{symbol}숏 -> {profit}')
        if not long_trade_executed:
            if data['low'].iloc[-1] <= lower_band.iloc[-1]:
            # 이전 캔들의 저가가 하단 밴드를 돌파한 경우 매수
                if (upper_band.iloc[-1] - lower_band.iloc[-1])/(upper_band.iloc[-1] + lower_band.iloc[-1])*50>=band_range:
                    volume_oscillator = calculate_volume_oscillator(df['volume'].astype(float))
                    volume_oscillator1 = volume_oscillator.iloc[-1]
                    volume_oscillator2 = volume_oscillator.iloc[-2]
                    if volume_oscillator1 >= 40 and volume_oscillator2 <= 40:
                        long_quantity = calculate_quantity(symbol)*(leverage-5.2)
                        send_to_telegram(f'{symbol}의 거래량이 폭증.')
                    else:
                        long_quantity = calculate_quantity(symbol)*(leverage-0.2)
                    profit = data['close'].iloc[-1]
                    limit_buy_order = place_limit_order(symbol, 'BUY', long_quantity, profit)
                    now = datetime.now()
                    buy_status_future = now
                    buy_future = now + timedelta(hours=4)
                    send_to_telegram(f'{symbol}롱 -> {profit}')

    if short_trade_executed==True:
        if current_price <= ema.iloc[-1]:
            # 이익 신호: 9 EMA에 도달했을 때 포지션 종료 (익절)
            if volume_oscillator1 >= 40 and volume_oscillator2 >= 40:
                order_info = exchange.fetch_order(limit_sell_order['id'], symbol)
                order_status = order_info['status']
                if order_status == 'open':
                    exchange.cancel_order(limit_sell_order['id'], symbol)
                    short_trade_executed = False
                else:
                    end_profit = abs(profit - current_price)
                    send_to_telegram(f'{symbol}포지션 종료 -> 차익 : {end_profit*short_quantity}')
                    place_limit_order(symbol, 'BUY', short_quantity, current_price)
                    short_trade_executed = False
            else:
                order_info = exchange.fetch_order(limit_sell_order['id'], symbol)
                order_status = order_info['status']
                if order_status == 'open':
                    now = datetime.now()
                    if now>=sell_status_future:
                        send_to_telegram(f'지정가 {symbol}매도 유지')
                        sell_status_future = now + timedelta(hours=1)
                else:
                    end_profit = abs(profit - current_price)
                    send_to_telegram(f'{symbol}포지션 종료 -> 차익 : {end_profit*short_quantity}')
                    place_limit_order(symbol, 'BUY', short_quantity, current_price)
                    short_trade_executed = False
            
    if long_trade_executed==True:
        if current_price >= ema.iloc[-1]:
            if volume_oscillator1 >= 40 and volume_oscillator2 >= 40:
                order_info = exchange.fetch_order(limit_buy_order['id'], symbol)
                order_status = order_info['status']
                if order_status == 'open':
                    exchange.cancel_order(limit_buy_order['id'], symbol)
                    long_trade_executed = False
                else:
                    end_profit = abs(current_price - profit)
                    send_to_telegram(f'{symbol}포지션 종료 -> 차익 : {end_profit*short_quantity}')
                    place_limit_order(symbol, 'SELL', long_quantity, current_price)
                    short_quantity = calculate_quantity(symbol)*(leverage-0.2)
                    long_trade_executed = False
            else:
                order_info = exchange.fetch_order(limit_buy_order['id'], symbol)
                order_status = order_info['status']
                if order_status == 'open':
                    now = datetime.now()
                    if now>=buy_status_future:
                        send_to_telegram(f'지정가 {symbol}매수 유지')
                        buy_status_future = now + timedelta(hours=1)
                else:
                    end_profit = abs(current_price - profit)
                    send_to_telegram(f'{symbol}포지션 종료 -> 차익 : {end_profit*short_quantity}')
                    place_limit_order(symbol, 'SELL', long_quantity, current_price)
                    long_trade_executed = False
                

    if short_trade_executed==True:
        order_info = exchange.fetch_order(limit_sell_order['id'], symbol)
        order_status = order_info['status']
        if order_status == 'open':
            now = datetime.now()
            if now>=sell_future:
                exchange.cancel_order(limit_sell_order['id'], symbol)
                send_to_telegram(f'시간초과로 인한 {symbol}숏 포지션 취소')
                short_trade_executed = False
                
    elif long_trade_executed==True:
        order_info = exchange.fetch_order(limit_buy_order['id'], symbol)
        order_status = order_info['status']
        if order_status == 'open':
            now = datetime.now()
            if now>=buy_future:
                exchange.cancel_order(limit_buy_order['id'], symbol)
                send_to_telegram(f'시간초과로 인한 {symbol}롱 포지션 취소')
                long_trade_executed = False


# 메인 루프
count=0
while True:
    try:
        if not stop:
            # OHLCV 데이터 가져오기
            candles = exchange.fetch_ohlcv(
                symbol=symbol,
                timeframe=timeframe,
                since=None,
                limit=50
            )

            df = pd.DataFrame(data=candles, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')

            time.sleep(10)          
            # 전략 실행
            execute=execute_strategy(df, window=20, num_std_dev=3.2, ema_period=9)
            #print(execute)
        elif stop:
            long_trade_executed = False
            short_trade_executed = False
            trend_follow_long = False
            trend_follow_short = False
            stop_loss = False
            follow = False
            time.sleep(60)
    except Exception as e:
        count+=1
        if count==10:
            stop = True
        error_message = f"An error occurred: {e}"
        send_to_telegram(error_message)
        pass
